/**
 * @file generic_number_parser.rlh re-usable ragel FSM fragment for number parsing
 *
 * Copyright (c) 2010-2016 Neto Ranito & Seabra LDA. All rights reserved.
 *
 * This file is part of nrs-osal.
 *
 * nrs-osal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * nrs-osal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with osal.  If not, see <http://www.gnu.org/licenses/>.
 */

%%{
    machine generic_number_parser;

    variable cs    cs_;
    variable p     p_;
    variable pe    pe_;
    variable eof   eof_;
    variable ts    ts_;
    variable te    te_;
    variable act   act_;

    ################################################
    # Number parser handles both integer and floats
    ################################################

    action sign
    {
        if ( fc == '-' ) {
            negative_ = true;
        }
    }

    action dgt
    {
        integer_ *= 10;
        integer_ += (fc - '0');
    }

    action frac
    {
        if ( ( fractional_digits_cnt_ + 1 ) < k_max_fractional_digits_ ) {
            fractional_ *= 10;
            divider_    *= 10;
            fractional_ += (fc - '0');
            fractional_digits_cnt_++;
        }
    }

    action exp
    {
        exponent_ *= 10;
        exponent_ += (fc - '0');
    }

    action exp_sign
    {
        if ( fc == '-' ) {
            negative_exponent_ = true;
        }
    }


    action reset_number
    {
        negative_              = false;
        integer_               = 0;
        fractional_            = 0;
        fractional_digits_cnt_ = 0;
        fractional_digits_cnt_ = 0;
        divider_               = 1;
        negative_exponent_     = false;
        exponent_              = 0;
    }

    action parse_number
    {
        if ( divider_ == 1 && exponent_ == 0 ) {
            integer_value_ = negative_ ? -integer_ : integer_;
            double_value_  = integer_value_;
        } else {
            if ( negative_ == false ) {
                double_value_ = integer_ + (double) fractional_ / (double) divider_;
            } else {
                double_value_ = -(integer_ + (double) fractional_ / (double) divider_);
            }
            if ( exponent_ != 0 ) {
                if ( negative_exponent_ == false ) {
                    double_value_ *= (double) osal::utils::Pow10((int)exponent_);
                } else {
                    double_value_ /= (double) osal::utils::Pow10((int)exponent_);
                }
            }
        }
    }

    number = (zlen >reset_number ([+\-] $sign)? [0-9]+ $dgt ( '.' [0-9]+ $frac )?( [eE] ( [+\-] $exp_sign )? [0-9]+ $exp )? %parse_number);

    positive_number = (zlen >reset_number [0-9]+ $dgt ( '.' [0-9]+ $frac )?( [eE] ( '-' $exp_sign )? [0-9]+ $exp )? %parse_number);

    #
    #  WARNING: the following combination is very permissive: it will accept ',' or '.' as decimal separator!
    #
    double_number = (zlen >reset_number ([+\-] $sign)? [0-9]+ $dgt ( ( '.' | ',' ) [0-9]+ $frac )?( [eE] ( [+\-] $exp_sign )? [0-9]+ $exp )? %parse_number);
    double_number_olz = (zlen >reset_number ([+\-] $sign)? [0-9]* $dgt ( ( '.' | ',' ) [0-9]+ $frac )?( [eE] ( [+\-] $exp_sign )? [0-9]+ $exp )? %parse_number);
    positive_double_number = (zlen >reset_number [0-9]+ $dgt ( ( '.' | ',' ) [0-9]+ $frac )?( [eE] ( '-' $exp_sign )? [0-9]+ $exp )? %parse_number);
    positive_double_number_olz = (zlen >reset_number [0-9]* $dgt ( ( '.' | ',' ) [0-9]+ $frac )?( [eE] ( '-' $exp_sign )? [0-9]+ $exp )? %parse_number);

}%%